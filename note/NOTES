
* store the tickets (stories, cards, bugs) - in a subdir of the repo, or a branch?

* merge strategy - if in branch, we can automate, if in subdir, must be human readable

* branch work?
  - if closed in a branch, how do we handle that when branch merged? (seperate command)
  $ git merge branch_name; tic merge

* Lighthouse integration
  $ tic sync

States - open, resolved, invalid, hold

Assignment - user/email


USAGE
==========

tic recent

tic list (all open)
tic list state:closed
tic list tag:bug
tic list git:treeish

tic find assigned:me state:open date:"this week"

tic milestone
tic milestone migration1 (list tickets)
tic milestone -n migration1 3/4/08 (new milestone)
tic milestone -a {1} (add ticket to milestone)
tic milestone -d migration1 (delete)

tic status (tics grouped by milestone, stats)

tic tag (show tags)
tic tag {1} -n new_tag
tic tag {1} -d tag_name
tic tag -D tag_name
tic tag -r old_tag new_tag (rename tag)

tic show {1} 
tic show {1} -c (comments)
tic show {1} -t (tasks)
tic show {1} -a (attachments)

tic sync (lighthouse)

tic checkout {1} - checks out a bug for time tracking - says you're working on it
tic assign {1} (person/partial - defaults to self) [-c] (and checkout)
tic state {1} resolved [branch - defaults to current, only shows in this branch)

tic attach {1} file.ext -m "file description"
tic attach {1} 
tic attach {1} {attach-id} > file

tic comment {1} -m "I think this might be done"
tic comment --recent

tic new [prompts for info] (title, comment, tags, [state, assigned])
tic new -t bug "the thingy doesnt work" (treeish - defaults to current branch)

??

tic branch (shows tic branches - automatically created when using tic in a git branch)
tic merge [git_branch]  (brings in all bug states from branch)
tic merge --preview [git_branch]  (doesn't do the merge, but shows what it would do)

tic git-commit "message" (commits git and attaches tic number)

-- later? --

tic task
tic task new -m "my new task"
